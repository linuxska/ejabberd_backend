<?php


/**
 * Base class that represents a query for the 'archive_collections' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Tue Sep 30 17:21:54 2014
 *
 * @method ArchiveCollectionsQuery orderById($order = Criteria::ASC) Order by the id column
 * @method ArchiveCollectionsQuery orderByPrevId($order = Criteria::ASC) Order by the prev_id column
 * @method ArchiveCollectionsQuery orderByNextId($order = Criteria::ASC) Order by the next_id column
 * @method ArchiveCollectionsQuery orderByUs($order = Criteria::ASC) Order by the us column
 * @method ArchiveCollectionsQuery orderByWithUser($order = Criteria::ASC) Order by the with_user column
 * @method ArchiveCollectionsQuery orderByWithServer($order = Criteria::ASC) Order by the with_server column
 * @method ArchiveCollectionsQuery orderByWithResource($order = Criteria::ASC) Order by the with_resource column
 * @method ArchiveCollectionsQuery orderByUtc($order = Criteria::ASC) Order by the utc column
 * @method ArchiveCollectionsQuery orderByChangeBy($order = Criteria::ASC) Order by the change_by column
 * @method ArchiveCollectionsQuery orderByChangeUtc($order = Criteria::ASC) Order by the change_utc column
 * @method ArchiveCollectionsQuery orderByDeleted($order = Criteria::ASC) Order by the deleted column
 * @method ArchiveCollectionsQuery orderBySubject($order = Criteria::ASC) Order by the subject column
 * @method ArchiveCollectionsQuery orderByThread($order = Criteria::ASC) Order by the thread column
 * @method ArchiveCollectionsQuery orderByCrypt($order = Criteria::ASC) Order by the crypt column
 * @method ArchiveCollectionsQuery orderByExtra($order = Criteria::ASC) Order by the extra column
 *
 * @method ArchiveCollectionsQuery groupById() Group by the id column
 * @method ArchiveCollectionsQuery groupByPrevId() Group by the prev_id column
 * @method ArchiveCollectionsQuery groupByNextId() Group by the next_id column
 * @method ArchiveCollectionsQuery groupByUs() Group by the us column
 * @method ArchiveCollectionsQuery groupByWithUser() Group by the with_user column
 * @method ArchiveCollectionsQuery groupByWithServer() Group by the with_server column
 * @method ArchiveCollectionsQuery groupByWithResource() Group by the with_resource column
 * @method ArchiveCollectionsQuery groupByUtc() Group by the utc column
 * @method ArchiveCollectionsQuery groupByChangeBy() Group by the change_by column
 * @method ArchiveCollectionsQuery groupByChangeUtc() Group by the change_utc column
 * @method ArchiveCollectionsQuery groupByDeleted() Group by the deleted column
 * @method ArchiveCollectionsQuery groupBySubject() Group by the subject column
 * @method ArchiveCollectionsQuery groupByThread() Group by the thread column
 * @method ArchiveCollectionsQuery groupByCrypt() Group by the crypt column
 * @method ArchiveCollectionsQuery groupByExtra() Group by the extra column
 *
 * @method ArchiveCollectionsQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method ArchiveCollectionsQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method ArchiveCollectionsQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method ArchiveCollections findOne(PropelPDO $con = null) Return the first ArchiveCollections matching the query
 * @method ArchiveCollections findOneOrCreate(PropelPDO $con = null) Return the first ArchiveCollections matching the query, or a new ArchiveCollections object populated from the query conditions when no match is found
 *
 * @method ArchiveCollections findOneById(int $id) Return the first ArchiveCollections filtered by the id column
 * @method ArchiveCollections findOneByPrevId(int $prev_id) Return the first ArchiveCollections filtered by the prev_id column
 * @method ArchiveCollections findOneByNextId(int $next_id) Return the first ArchiveCollections filtered by the next_id column
 * @method ArchiveCollections findOneByUs(string $us) Return the first ArchiveCollections filtered by the us column
 * @method ArchiveCollections findOneByWithUser(string $with_user) Return the first ArchiveCollections filtered by the with_user column
 * @method ArchiveCollections findOneByWithServer(string $with_server) Return the first ArchiveCollections filtered by the with_server column
 * @method ArchiveCollections findOneByWithResource(string $with_resource) Return the first ArchiveCollections filtered by the with_resource column
 * @method ArchiveCollections findOneByUtc(string $utc) Return the first ArchiveCollections filtered by the utc column
 * @method ArchiveCollections findOneByChangeBy(string $change_by) Return the first ArchiveCollections filtered by the change_by column
 * @method ArchiveCollections findOneByChangeUtc(string $change_utc) Return the first ArchiveCollections filtered by the change_utc column
 * @method ArchiveCollections findOneByDeleted(int $deleted) Return the first ArchiveCollections filtered by the deleted column
 * @method ArchiveCollections findOneBySubject(string $subject) Return the first ArchiveCollections filtered by the subject column
 * @method ArchiveCollections findOneByThread(string $thread) Return the first ArchiveCollections filtered by the thread column
 * @method ArchiveCollections findOneByCrypt(int $crypt) Return the first ArchiveCollections filtered by the crypt column
 * @method ArchiveCollections findOneByExtra(string $extra) Return the first ArchiveCollections filtered by the extra column
 *
 * @method array findById(int $id) Return ArchiveCollections objects filtered by the id column
 * @method array findByPrevId(int $prev_id) Return ArchiveCollections objects filtered by the prev_id column
 * @method array findByNextId(int $next_id) Return ArchiveCollections objects filtered by the next_id column
 * @method array findByUs(string $us) Return ArchiveCollections objects filtered by the us column
 * @method array findByWithUser(string $with_user) Return ArchiveCollections objects filtered by the with_user column
 * @method array findByWithServer(string $with_server) Return ArchiveCollections objects filtered by the with_server column
 * @method array findByWithResource(string $with_resource) Return ArchiveCollections objects filtered by the with_resource column
 * @method array findByUtc(string $utc) Return ArchiveCollections objects filtered by the utc column
 * @method array findByChangeBy(string $change_by) Return ArchiveCollections objects filtered by the change_by column
 * @method array findByChangeUtc(string $change_utc) Return ArchiveCollections objects filtered by the change_utc column
 * @method array findByDeleted(int $deleted) Return ArchiveCollections objects filtered by the deleted column
 * @method array findBySubject(string $subject) Return ArchiveCollections objects filtered by the subject column
 * @method array findByThread(string $thread) Return ArchiveCollections objects filtered by the thread column
 * @method array findByCrypt(int $crypt) Return ArchiveCollections objects filtered by the crypt column
 * @method array findByExtra(string $extra) Return ArchiveCollections objects filtered by the extra column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseArchiveCollectionsQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseArchiveCollectionsQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'ArchiveCollections', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new ArchiveCollectionsQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     ArchiveCollectionsQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return ArchiveCollectionsQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof ArchiveCollectionsQuery) {
            return $criteria;
        }
        $query = new ArchiveCollectionsQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   ArchiveCollections|ArchiveCollections[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = ArchiveCollectionsPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(ArchiveCollectionsPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   ArchiveCollections A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `ID`, `PREV_ID`, `NEXT_ID`, `US`, `WITH_USER`, `WITH_SERVER`, `WITH_RESOURCE`, `UTC`, `CHANGE_BY`, `CHANGE_UTC`, `DELETED`, `SUBJECT`, `THREAD`, `CRYPT`, `EXTRA` FROM `archive_collections` WHERE `ID` = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new ArchiveCollections();
            $obj->hydrate($row);
            ArchiveCollectionsPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return ArchiveCollections|ArchiveCollections[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|ArchiveCollections[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return ArchiveCollectionsQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(ArchiveCollectionsPeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return ArchiveCollectionsQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(ArchiveCollectionsPeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ArchiveCollectionsQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(ArchiveCollectionsPeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the prev_id column
     *
     * Example usage:
     * <code>
     * $query->filterByPrevId(1234); // WHERE prev_id = 1234
     * $query->filterByPrevId(array(12, 34)); // WHERE prev_id IN (12, 34)
     * $query->filterByPrevId(array('min' => 12)); // WHERE prev_id > 12
     * </code>
     *
     * @param     mixed $prevId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ArchiveCollectionsQuery The current query, for fluid interface
     */
    public function filterByPrevId($prevId = null, $comparison = null)
    {
        if (is_array($prevId)) {
            $useMinMax = false;
            if (isset($prevId['min'])) {
                $this->addUsingAlias(ArchiveCollectionsPeer::PREV_ID, $prevId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($prevId['max'])) {
                $this->addUsingAlias(ArchiveCollectionsPeer::PREV_ID, $prevId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ArchiveCollectionsPeer::PREV_ID, $prevId, $comparison);
    }

    /**
     * Filter the query on the next_id column
     *
     * Example usage:
     * <code>
     * $query->filterByNextId(1234); // WHERE next_id = 1234
     * $query->filterByNextId(array(12, 34)); // WHERE next_id IN (12, 34)
     * $query->filterByNextId(array('min' => 12)); // WHERE next_id > 12
     * </code>
     *
     * @param     mixed $nextId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ArchiveCollectionsQuery The current query, for fluid interface
     */
    public function filterByNextId($nextId = null, $comparison = null)
    {
        if (is_array($nextId)) {
            $useMinMax = false;
            if (isset($nextId['min'])) {
                $this->addUsingAlias(ArchiveCollectionsPeer::NEXT_ID, $nextId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($nextId['max'])) {
                $this->addUsingAlias(ArchiveCollectionsPeer::NEXT_ID, $nextId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ArchiveCollectionsPeer::NEXT_ID, $nextId, $comparison);
    }

    /**
     * Filter the query on the us column
     *
     * Example usage:
     * <code>
     * $query->filterByUs('fooValue');   // WHERE us = 'fooValue'
     * $query->filterByUs('%fooValue%'); // WHERE us LIKE '%fooValue%'
     * </code>
     *
     * @param     string $us The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ArchiveCollectionsQuery The current query, for fluid interface
     */
    public function filterByUs($us = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($us)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $us)) {
                $us = str_replace('*', '%', $us);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(ArchiveCollectionsPeer::US, $us, $comparison);
    }

    /**
     * Filter the query on the with_user column
     *
     * Example usage:
     * <code>
     * $query->filterByWithUser('fooValue');   // WHERE with_user = 'fooValue'
     * $query->filterByWithUser('%fooValue%'); // WHERE with_user LIKE '%fooValue%'
     * </code>
     *
     * @param     string $withUser The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ArchiveCollectionsQuery The current query, for fluid interface
     */
    public function filterByWithUser($withUser = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($withUser)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $withUser)) {
                $withUser = str_replace('*', '%', $withUser);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(ArchiveCollectionsPeer::WITH_USER, $withUser, $comparison);
    }

    /**
     * Filter the query on the with_server column
     *
     * Example usage:
     * <code>
     * $query->filterByWithServer('fooValue');   // WHERE with_server = 'fooValue'
     * $query->filterByWithServer('%fooValue%'); // WHERE with_server LIKE '%fooValue%'
     * </code>
     *
     * @param     string $withServer The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ArchiveCollectionsQuery The current query, for fluid interface
     */
    public function filterByWithServer($withServer = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($withServer)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $withServer)) {
                $withServer = str_replace('*', '%', $withServer);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(ArchiveCollectionsPeer::WITH_SERVER, $withServer, $comparison);
    }

    /**
     * Filter the query on the with_resource column
     *
     * Example usage:
     * <code>
     * $query->filterByWithResource('fooValue');   // WHERE with_resource = 'fooValue'
     * $query->filterByWithResource('%fooValue%'); // WHERE with_resource LIKE '%fooValue%'
     * </code>
     *
     * @param     string $withResource The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ArchiveCollectionsQuery The current query, for fluid interface
     */
    public function filterByWithResource($withResource = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($withResource)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $withResource)) {
                $withResource = str_replace('*', '%', $withResource);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(ArchiveCollectionsPeer::WITH_RESOURCE, $withResource, $comparison);
    }

    /**
     * Filter the query on the utc column
     *
     * Example usage:
     * <code>
     * $query->filterByUtc('2011-03-14'); // WHERE utc = '2011-03-14'
     * $query->filterByUtc('now'); // WHERE utc = '2011-03-14'
     * $query->filterByUtc(array('max' => 'yesterday')); // WHERE utc > '2011-03-13'
     * </code>
     *
     * @param     mixed $utc The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ArchiveCollectionsQuery The current query, for fluid interface
     */
    public function filterByUtc($utc = null, $comparison = null)
    {
        if (is_array($utc)) {
            $useMinMax = false;
            if (isset($utc['min'])) {
                $this->addUsingAlias(ArchiveCollectionsPeer::UTC, $utc['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($utc['max'])) {
                $this->addUsingAlias(ArchiveCollectionsPeer::UTC, $utc['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ArchiveCollectionsPeer::UTC, $utc, $comparison);
    }

    /**
     * Filter the query on the change_by column
     *
     * Example usage:
     * <code>
     * $query->filterByChangeBy('fooValue');   // WHERE change_by = 'fooValue'
     * $query->filterByChangeBy('%fooValue%'); // WHERE change_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $changeBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ArchiveCollectionsQuery The current query, for fluid interface
     */
    public function filterByChangeBy($changeBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($changeBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $changeBy)) {
                $changeBy = str_replace('*', '%', $changeBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(ArchiveCollectionsPeer::CHANGE_BY, $changeBy, $comparison);
    }

    /**
     * Filter the query on the change_utc column
     *
     * Example usage:
     * <code>
     * $query->filterByChangeUtc('2011-03-14'); // WHERE change_utc = '2011-03-14'
     * $query->filterByChangeUtc('now'); // WHERE change_utc = '2011-03-14'
     * $query->filterByChangeUtc(array('max' => 'yesterday')); // WHERE change_utc > '2011-03-13'
     * </code>
     *
     * @param     mixed $changeUtc The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ArchiveCollectionsQuery The current query, for fluid interface
     */
    public function filterByChangeUtc($changeUtc = null, $comparison = null)
    {
        if (is_array($changeUtc)) {
            $useMinMax = false;
            if (isset($changeUtc['min'])) {
                $this->addUsingAlias(ArchiveCollectionsPeer::CHANGE_UTC, $changeUtc['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($changeUtc['max'])) {
                $this->addUsingAlias(ArchiveCollectionsPeer::CHANGE_UTC, $changeUtc['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ArchiveCollectionsPeer::CHANGE_UTC, $changeUtc, $comparison);
    }

    /**
     * Filter the query on the deleted column
     *
     * Example usage:
     * <code>
     * $query->filterByDeleted(1234); // WHERE deleted = 1234
     * $query->filterByDeleted(array(12, 34)); // WHERE deleted IN (12, 34)
     * $query->filterByDeleted(array('min' => 12)); // WHERE deleted > 12
     * </code>
     *
     * @param     mixed $deleted The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ArchiveCollectionsQuery The current query, for fluid interface
     */
    public function filterByDeleted($deleted = null, $comparison = null)
    {
        if (is_array($deleted)) {
            $useMinMax = false;
            if (isset($deleted['min'])) {
                $this->addUsingAlias(ArchiveCollectionsPeer::DELETED, $deleted['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($deleted['max'])) {
                $this->addUsingAlias(ArchiveCollectionsPeer::DELETED, $deleted['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ArchiveCollectionsPeer::DELETED, $deleted, $comparison);
    }

    /**
     * Filter the query on the subject column
     *
     * Example usage:
     * <code>
     * $query->filterBySubject('fooValue');   // WHERE subject = 'fooValue'
     * $query->filterBySubject('%fooValue%'); // WHERE subject LIKE '%fooValue%'
     * </code>
     *
     * @param     string $subject The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ArchiveCollectionsQuery The current query, for fluid interface
     */
    public function filterBySubject($subject = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($subject)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $subject)) {
                $subject = str_replace('*', '%', $subject);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(ArchiveCollectionsPeer::SUBJECT, $subject, $comparison);
    }

    /**
     * Filter the query on the thread column
     *
     * Example usage:
     * <code>
     * $query->filterByThread('fooValue');   // WHERE thread = 'fooValue'
     * $query->filterByThread('%fooValue%'); // WHERE thread LIKE '%fooValue%'
     * </code>
     *
     * @param     string $thread The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ArchiveCollectionsQuery The current query, for fluid interface
     */
    public function filterByThread($thread = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($thread)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $thread)) {
                $thread = str_replace('*', '%', $thread);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(ArchiveCollectionsPeer::THREAD, $thread, $comparison);
    }

    /**
     * Filter the query on the crypt column
     *
     * Example usage:
     * <code>
     * $query->filterByCrypt(1234); // WHERE crypt = 1234
     * $query->filterByCrypt(array(12, 34)); // WHERE crypt IN (12, 34)
     * $query->filterByCrypt(array('min' => 12)); // WHERE crypt > 12
     * </code>
     *
     * @param     mixed $crypt The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ArchiveCollectionsQuery The current query, for fluid interface
     */
    public function filterByCrypt($crypt = null, $comparison = null)
    {
        if (is_array($crypt)) {
            $useMinMax = false;
            if (isset($crypt['min'])) {
                $this->addUsingAlias(ArchiveCollectionsPeer::CRYPT, $crypt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($crypt['max'])) {
                $this->addUsingAlias(ArchiveCollectionsPeer::CRYPT, $crypt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ArchiveCollectionsPeer::CRYPT, $crypt, $comparison);
    }

    /**
     * Filter the query on the extra column
     *
     * Example usage:
     * <code>
     * $query->filterByExtra('fooValue');   // WHERE extra = 'fooValue'
     * $query->filterByExtra('%fooValue%'); // WHERE extra LIKE '%fooValue%'
     * </code>
     *
     * @param     string $extra The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ArchiveCollectionsQuery The current query, for fluid interface
     */
    public function filterByExtra($extra = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($extra)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $extra)) {
                $extra = str_replace('*', '%', $extra);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(ArchiveCollectionsPeer::EXTRA, $extra, $comparison);
    }

    /**
     * Exclude object from result
     *
     * @param   ArchiveCollections $archiveCollections Object to remove from the list of results
     *
     * @return ArchiveCollectionsQuery The current query, for fluid interface
     */
    public function prune($archiveCollections = null)
    {
        if ($archiveCollections) {
            $this->addUsingAlias(ArchiveCollectionsPeer::ID, $archiveCollections->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
