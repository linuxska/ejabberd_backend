<?php


/**
 * Base class that represents a query for the 'archive_jid_prefs' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Tue Sep 30 17:21:54 2014
 *
 * @method ArchiveJidPrefsQuery orderByUs($order = Criteria::ASC) Order by the us column
 * @method ArchiveJidPrefsQuery orderByWithUser($order = Criteria::ASC) Order by the with_user column
 * @method ArchiveJidPrefsQuery orderByWithServer($order = Criteria::ASC) Order by the with_server column
 * @method ArchiveJidPrefsQuery orderByWithResource($order = Criteria::ASC) Order by the with_resource column
 * @method ArchiveJidPrefsQuery orderBySave($order = Criteria::ASC) Order by the save column
 * @method ArchiveJidPrefsQuery orderByExpire($order = Criteria::ASC) Order by the expire column
 * @method ArchiveJidPrefsQuery orderByOtr($order = Criteria::ASC) Order by the otr column
 *
 * @method ArchiveJidPrefsQuery groupByUs() Group by the us column
 * @method ArchiveJidPrefsQuery groupByWithUser() Group by the with_user column
 * @method ArchiveJidPrefsQuery groupByWithServer() Group by the with_server column
 * @method ArchiveJidPrefsQuery groupByWithResource() Group by the with_resource column
 * @method ArchiveJidPrefsQuery groupBySave() Group by the save column
 * @method ArchiveJidPrefsQuery groupByExpire() Group by the expire column
 * @method ArchiveJidPrefsQuery groupByOtr() Group by the otr column
 *
 * @method ArchiveJidPrefsQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method ArchiveJidPrefsQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method ArchiveJidPrefsQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method ArchiveJidPrefs findOne(PropelPDO $con = null) Return the first ArchiveJidPrefs matching the query
 * @method ArchiveJidPrefs findOneOrCreate(PropelPDO $con = null) Return the first ArchiveJidPrefs matching the query, or a new ArchiveJidPrefs object populated from the query conditions when no match is found
 *
 * @method ArchiveJidPrefs findOneByUs(string $us) Return the first ArchiveJidPrefs filtered by the us column
 * @method ArchiveJidPrefs findOneByWithUser(string $with_user) Return the first ArchiveJidPrefs filtered by the with_user column
 * @method ArchiveJidPrefs findOneByWithServer(string $with_server) Return the first ArchiveJidPrefs filtered by the with_server column
 * @method ArchiveJidPrefs findOneByWithResource(string $with_resource) Return the first ArchiveJidPrefs filtered by the with_resource column
 * @method ArchiveJidPrefs findOneBySave(int $save) Return the first ArchiveJidPrefs filtered by the save column
 * @method ArchiveJidPrefs findOneByExpire(int $expire) Return the first ArchiveJidPrefs filtered by the expire column
 * @method ArchiveJidPrefs findOneByOtr(int $otr) Return the first ArchiveJidPrefs filtered by the otr column
 *
 * @method array findByUs(string $us) Return ArchiveJidPrefs objects filtered by the us column
 * @method array findByWithUser(string $with_user) Return ArchiveJidPrefs objects filtered by the with_user column
 * @method array findByWithServer(string $with_server) Return ArchiveJidPrefs objects filtered by the with_server column
 * @method array findByWithResource(string $with_resource) Return ArchiveJidPrefs objects filtered by the with_resource column
 * @method array findBySave(int $save) Return ArchiveJidPrefs objects filtered by the save column
 * @method array findByExpire(int $expire) Return ArchiveJidPrefs objects filtered by the expire column
 * @method array findByOtr(int $otr) Return ArchiveJidPrefs objects filtered by the otr column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseArchiveJidPrefsQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseArchiveJidPrefsQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'ArchiveJidPrefs', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new ArchiveJidPrefsQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     ArchiveJidPrefsQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return ArchiveJidPrefsQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof ArchiveJidPrefsQuery) {
            return $criteria;
        }
        $query = new ArchiveJidPrefsQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj = $c->findPk(array(12, 34, 56, 78), $con);
     * </code>
     *
     * @param array $key Primary key to use for the query
                         A Primary key composition: [$us, $with_user, $with_server, $with_resource]
     * @param     PropelPDO $con an optional connection object
     *
     * @return   ArchiveJidPrefs|ArchiveJidPrefs[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = ArchiveJidPrefsPeer::getInstanceFromPool(serialize(array((string) $key[0], (string) $key[1], (string) $key[2], (string) $key[3]))))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(ArchiveJidPrefsPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   ArchiveJidPrefs A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `US`, `WITH_USER`, `WITH_SERVER`, `WITH_RESOURCE`, `SAVE`, `EXPIRE`, `OTR` FROM `archive_jid_prefs` WHERE `US` = :p0 AND `WITH_USER` = :p1 AND `WITH_SERVER` = :p2 AND `WITH_RESOURCE` = :p3';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key[0], PDO::PARAM_STR);
            $stmt->bindValue(':p1', $key[1], PDO::PARAM_STR);
            $stmt->bindValue(':p2', $key[2], PDO::PARAM_STR);
            $stmt->bindValue(':p3', $key[3], PDO::PARAM_STR);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new ArchiveJidPrefs();
            $obj->hydrate($row);
            ArchiveJidPrefsPeer::addInstanceToPool($obj, serialize(array((string) $key[0], (string) $key[1], (string) $key[2], (string) $key[3])));
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return ArchiveJidPrefs|ArchiveJidPrefs[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(array(12, 56), array(832, 123), array(123, 456)), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|ArchiveJidPrefs[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return ArchiveJidPrefsQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {
        $this->addUsingAlias(ArchiveJidPrefsPeer::US, $key[0], Criteria::EQUAL);
        $this->addUsingAlias(ArchiveJidPrefsPeer::WITH_USER, $key[1], Criteria::EQUAL);
        $this->addUsingAlias(ArchiveJidPrefsPeer::WITH_SERVER, $key[2], Criteria::EQUAL);
        $this->addUsingAlias(ArchiveJidPrefsPeer::WITH_RESOURCE, $key[3], Criteria::EQUAL);

        return $this;
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return ArchiveJidPrefsQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {
        if (empty($keys)) {
            return $this->add(null, '1<>1', Criteria::CUSTOM);
        }
        foreach ($keys as $key) {
            $cton0 = $this->getNewCriterion(ArchiveJidPrefsPeer::US, $key[0], Criteria::EQUAL);
            $cton1 = $this->getNewCriterion(ArchiveJidPrefsPeer::WITH_USER, $key[1], Criteria::EQUAL);
            $cton0->addAnd($cton1);
            $cton2 = $this->getNewCriterion(ArchiveJidPrefsPeer::WITH_SERVER, $key[2], Criteria::EQUAL);
            $cton0->addAnd($cton2);
            $cton3 = $this->getNewCriterion(ArchiveJidPrefsPeer::WITH_RESOURCE, $key[3], Criteria::EQUAL);
            $cton0->addAnd($cton3);
            $this->addOr($cton0);
        }

        return $this;
    }

    /**
     * Filter the query on the us column
     *
     * Example usage:
     * <code>
     * $query->filterByUs('fooValue');   // WHERE us = 'fooValue'
     * $query->filterByUs('%fooValue%'); // WHERE us LIKE '%fooValue%'
     * </code>
     *
     * @param     string $us The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ArchiveJidPrefsQuery The current query, for fluid interface
     */
    public function filterByUs($us = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($us)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $us)) {
                $us = str_replace('*', '%', $us);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(ArchiveJidPrefsPeer::US, $us, $comparison);
    }

    /**
     * Filter the query on the with_user column
     *
     * Example usage:
     * <code>
     * $query->filterByWithUser('fooValue');   // WHERE with_user = 'fooValue'
     * $query->filterByWithUser('%fooValue%'); // WHERE with_user LIKE '%fooValue%'
     * </code>
     *
     * @param     string $withUser The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ArchiveJidPrefsQuery The current query, for fluid interface
     */
    public function filterByWithUser($withUser = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($withUser)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $withUser)) {
                $withUser = str_replace('*', '%', $withUser);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(ArchiveJidPrefsPeer::WITH_USER, $withUser, $comparison);
    }

    /**
     * Filter the query on the with_server column
     *
     * Example usage:
     * <code>
     * $query->filterByWithServer('fooValue');   // WHERE with_server = 'fooValue'
     * $query->filterByWithServer('%fooValue%'); // WHERE with_server LIKE '%fooValue%'
     * </code>
     *
     * @param     string $withServer The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ArchiveJidPrefsQuery The current query, for fluid interface
     */
    public function filterByWithServer($withServer = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($withServer)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $withServer)) {
                $withServer = str_replace('*', '%', $withServer);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(ArchiveJidPrefsPeer::WITH_SERVER, $withServer, $comparison);
    }

    /**
     * Filter the query on the with_resource column
     *
     * Example usage:
     * <code>
     * $query->filterByWithResource('fooValue');   // WHERE with_resource = 'fooValue'
     * $query->filterByWithResource('%fooValue%'); // WHERE with_resource LIKE '%fooValue%'
     * </code>
     *
     * @param     string $withResource The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ArchiveJidPrefsQuery The current query, for fluid interface
     */
    public function filterByWithResource($withResource = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($withResource)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $withResource)) {
                $withResource = str_replace('*', '%', $withResource);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(ArchiveJidPrefsPeer::WITH_RESOURCE, $withResource, $comparison);
    }

    /**
     * Filter the query on the save column
     *
     * Example usage:
     * <code>
     * $query->filterBySave(1234); // WHERE save = 1234
     * $query->filterBySave(array(12, 34)); // WHERE save IN (12, 34)
     * $query->filterBySave(array('min' => 12)); // WHERE save > 12
     * </code>
     *
     * @param     mixed $save The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ArchiveJidPrefsQuery The current query, for fluid interface
     */
    public function filterBySave($save = null, $comparison = null)
    {
        if (is_array($save)) {
            $useMinMax = false;
            if (isset($save['min'])) {
                $this->addUsingAlias(ArchiveJidPrefsPeer::SAVE, $save['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($save['max'])) {
                $this->addUsingAlias(ArchiveJidPrefsPeer::SAVE, $save['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ArchiveJidPrefsPeer::SAVE, $save, $comparison);
    }

    /**
     * Filter the query on the expire column
     *
     * Example usage:
     * <code>
     * $query->filterByExpire(1234); // WHERE expire = 1234
     * $query->filterByExpire(array(12, 34)); // WHERE expire IN (12, 34)
     * $query->filterByExpire(array('min' => 12)); // WHERE expire > 12
     * </code>
     *
     * @param     mixed $expire The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ArchiveJidPrefsQuery The current query, for fluid interface
     */
    public function filterByExpire($expire = null, $comparison = null)
    {
        if (is_array($expire)) {
            $useMinMax = false;
            if (isset($expire['min'])) {
                $this->addUsingAlias(ArchiveJidPrefsPeer::EXPIRE, $expire['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($expire['max'])) {
                $this->addUsingAlias(ArchiveJidPrefsPeer::EXPIRE, $expire['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ArchiveJidPrefsPeer::EXPIRE, $expire, $comparison);
    }

    /**
     * Filter the query on the otr column
     *
     * Example usage:
     * <code>
     * $query->filterByOtr(1234); // WHERE otr = 1234
     * $query->filterByOtr(array(12, 34)); // WHERE otr IN (12, 34)
     * $query->filterByOtr(array('min' => 12)); // WHERE otr > 12
     * </code>
     *
     * @param     mixed $otr The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ArchiveJidPrefsQuery The current query, for fluid interface
     */
    public function filterByOtr($otr = null, $comparison = null)
    {
        if (is_array($otr)) {
            $useMinMax = false;
            if (isset($otr['min'])) {
                $this->addUsingAlias(ArchiveJidPrefsPeer::OTR, $otr['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($otr['max'])) {
                $this->addUsingAlias(ArchiveJidPrefsPeer::OTR, $otr['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ArchiveJidPrefsPeer::OTR, $otr, $comparison);
    }

    /**
     * Exclude object from result
     *
     * @param   ArchiveJidPrefs $archiveJidPrefs Object to remove from the list of results
     *
     * @return ArchiveJidPrefsQuery The current query, for fluid interface
     */
    public function prune($archiveJidPrefs = null)
    {
        if ($archiveJidPrefs) {
            $this->addCond('pruneCond0', $this->getAliasedColName(ArchiveJidPrefsPeer::US), $archiveJidPrefs->getUs(), Criteria::NOT_EQUAL);
            $this->addCond('pruneCond1', $this->getAliasedColName(ArchiveJidPrefsPeer::WITH_USER), $archiveJidPrefs->getWithUser(), Criteria::NOT_EQUAL);
            $this->addCond('pruneCond2', $this->getAliasedColName(ArchiveJidPrefsPeer::WITH_SERVER), $archiveJidPrefs->getWithServer(), Criteria::NOT_EQUAL);
            $this->addCond('pruneCond3', $this->getAliasedColName(ArchiveJidPrefsPeer::WITH_RESOURCE), $archiveJidPrefs->getWithResource(), Criteria::NOT_EQUAL);
            $this->combine(array('pruneCond0', 'pruneCond1', 'pruneCond2', 'pruneCond3'), Criteria::LOGICAL_OR);
        }

        return $this;
    }

}
